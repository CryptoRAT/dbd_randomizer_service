"""
Django settings for dbd_randomizer_service project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Override default settings based on environment
ENVIRONMENT = os.environ.get('DJANGO_ENV', 'development')

# Load environment-specific settings
if ENVIRONMENT == 'production':
    from .settings_prod import *
elif ENVIRONMENT == 'test':
    from .settings_test import *
else:
    from .settings_dev import *

# Load runtime environment variables with defaults
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", get_random_secret_key())
DEBUG = os.getenv("DEBUG", str(DEBUG)).lower() == "true"  # Prefer runtime, default to False

# Print a warning if in production and DEBUG is enabled
if ENVIRONMENT == "production" and DEBUG:
    print("WARNING: DEBUG mode is enabled in production. This is a security risk!")

ALLOWED_HOSTS = os.getenv(
    "DJANGO_ALLOWED_HOSTS",
    ",".join(ALLOWED_HOSTS) if "ALLOWED_HOSTS" in globals() else "127.0.0.1,localhost"
).split(",")

DATABASE_NAME = os.getenv("DATABASE_NAME", DATABASE_NAME)
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD", DATABASE_PASSWORD)
DATABASE_HOST = os.getenv("DATABASE_HOST", DATABASE_HOST)
DATABASE_USER = os.getenv("DATABASE_USER", DATABASE_USER)
DATABASE_PORT = os.getenv("DATABASE_PORT", DATABASE_PORT)

# Debugging output
print(f"Environment: {ENVIRONMENT}")
print(f"Allowed Hosts: {ALLOWED_HOSTS}")

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    # apps from this project
    'killer',
    'perk',
    'survivor',
    'user'
]
print(f"Installed Apps: {INSTALLED_APPS}")
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user.middleware.RequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

CORS_ALLOW_CREDENTIALS = os.getenv("CORS_ALLOW_CREDENTIALS", "True").lower() == "true"
CSRF_COOKIE_SECURE = os.getenv("CSRF_COOKIE_SECURE", "False").lower() == "true"
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_NAME = "csrftoken"

ROOT_URLCONF = 'dbd_randomizer_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dbd_randomizer_service.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_HOST,
        'PORT': DATABASE_PORT,
    },
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = Path(BASE_DIR).joinpath('staticfiles')
STATICFILES_DIRS = (Path(BASE_DIR).joinpath('static'),)

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Password hashing
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

AUTH_USER_MODEL = 'user.RegisteredUser'
REST_USE_JWT = True

